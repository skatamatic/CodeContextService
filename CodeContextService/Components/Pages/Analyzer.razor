@page "/analyze"
@using Microsoft.AspNetCore.Authorization
@using RoslynTools.Analyzer
@using CodeContextService.Components.Views
@using CodeContextService.Components.ViewModels
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Code Analyzer</PageTitle>

<HeadContent>
    <!-- helper to scroll a container -->
    <script>
        window.scrollToBottom = id => {
            const el = document.getElementById(id);
            if (el) el.scrollTop = el.scrollHeight;
        };

        // read a cookie by name
        window.getCookieByName = name => {
            const match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));
            return match ? decodeURIComponent(match[2]) : null;
        };

        // write a cookie (1 year)
        window.setCookie = (name, value) => {
            document.cookie = `${name}=${encodeURIComponent(value)}; path=/; max-age=${60*60*24*365}`;
        };
    </script>

    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css"
          rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-csharp.min.js"></script>
</HeadContent>

<div class="container py-4">
    <h3>Code Analysis</h3>

    <!-- Inputs -->
    <div class="mb-3">
        <input
            value="@FilePath"
            @oninput="@(e => OnFieldChanged("FilePath", e.Value?.ToString()))"
            class="form-control"
            placeholder="Full path to a .cs file"
            disabled="@IsRunning" />
    </div>
    <div class="mb-3">
        <input
            type="number"
            value="@Depth"
            oninput="OnDepthChanged"
            class="form-control"
            placeholder="Depth (e.g. 1,2…)"
            min="0"
            disabled="@IsRunning" />
    </div>

    <!-- Actions -->
    <button class="btn btn-primary me-2"
            @onclick="RunAnalysis"
            disabled="@IsRunning">
        Find Definitions
    </button>
    <button class="btn btn-secondary"
            @onclick="ToggleLogs">
        @(LogsExpanded ? "Hide Logs ▲" : "Show Logs ▼")
    </button>

    <!-- Logs -->
    <div class="mt-4">
        @if (LogsExpanded)
        {
            <h5>Logs</h5>
        }
        <div id="logsContainer"
             class="border rounded p-2"
             style="max-height:@(LogsExpanded ? "300px" : "auto");overflow-y:@(LogsExpanded ? "auto" : "visible");transition:max-height 0.3s;">
            @if (!Logs.Any())
            {
                <em>No logs yet.</em>
            }
            else if (!LogsExpanded)
            {
                <div style="white-space:pre-wrap;">@Logs.Last()</div>
            }
            else
            {
                <ul class="mb-0">
                    @foreach (var line in Logs)
                    {
                        <li>@line</li>
                    }
                </ul>
            }
        </div>
    </div>

    <!-- Definitions -->
    <div class="mt-5">
        <h5>Definitions</h5>

        @if (IsRunning)
        {
            <div class="d-flex justify-content-center align-items-center" style="height:150px;">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Analyzing...</span>
                </div>
                <span class="ms-3 text-muted">Analyzing definitions...</span>
            </div>
        }
        else if (Results == null)
        {
            <p class="text-muted">No analysis run yet.</p>
        }
        else
        {
            <!-- Filter input -->
            <div class="mb-3">
                <input
                    value="@FilterText"
                    @oninput="@(e => OnFieldChanged("FilterText", e.Value?.ToString()))"
                    class="form-control"
                    placeholder="Filter definitions (FullName contains...)"
                    disabled="@IsRunning" />
            </div>

            @if (!DisplayDefs.Any())
            {
                <p class="text-danger">No definitions match "@FilterText".</p>
            }
            else
            {
                <DefinitionList @key="FilterText" Definitions="DisplayDefs" />
            }
        }
    </div>
</div>

@code {
    // --- persisted inputs ---
    private string? FilePath { get; set; }
    private int Depth { get; set; } = 1;
    private string FilterText { get; set; } = string.Empty;

    // --- UI state ---
    private bool IsRunning { get; set; }
    private List<string> Logs { get; } = new();
    private bool LogsExpanded { get; set; }
    private IEnumerable<DefinitionResult>? Results;

    // guard so we only load cookies once
    private bool _cookiesLoaded;

    private IEnumerable<DefinitionDisplayModel> DisplayDefs =>
        Results?
            .SelectMany(r => r.Definitions.Values, (r, d) => new { r.File, Definition = d })
            .Select(x => new DefinitionDisplayModel
                {
                    Symbol = x.Definition.Symbol,
                    Namespace = x.Definition.Namespace,
                    FullName = x.Definition.FullName,
                    Code = x.Definition.Code,
                    SourceFile = x.File
                })
            .Where(d =>
                string.IsNullOrWhiteSpace(FilterText) ||
                d.FullName.Contains(FilterText, StringComparison.OrdinalIgnoreCase)
            )
        ?? Enumerable.Empty<DefinitionDisplayModel>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_cookiesLoaded)
        {
            // read persisted inputs
            FilePath   = await JS.InvokeAsync<string>("getCookieByName", "FilePath")   ?? FilePath;
            var dc     = await JS.InvokeAsync<string>("getCookieByName", "Depth");
            if (int.TryParse(dc, out var dv)) Depth = dv;
            FilterText = await JS.InvokeAsync<string>("getCookieByName", "FilterText") ?? FilterText;

            _cookiesLoaded = true;
            StateHasChanged();
        }
    }

    // called on every text‐input for FilePath and FilterText
    private async Task OnFieldChanged(string fieldName, string? newValue)
    {
        switch (fieldName)
        {
            case "FilePath":   FilePath   = newValue; break;
            case "FilterText": FilterText = newValue ?? string.Empty; break;
        }

        await JS.InvokeVoidAsync("setCookie", fieldName, newValue ?? string.Empty);
    }

    // special handler for the numeric Depth field
    private async Task OnDepthChanged(ChangeEventArgs e)
    {
        var txt = e.Value?.ToString();
        if (int.TryParse(txt, out var v))
            Depth = v;
        else
            Depth = 0;

        await JS.InvokeVoidAsync("setCookie", "Depth", Depth.ToString());
    }

    void ToggleLogs() => LogsExpanded = !LogsExpanded;

    async Task RunAnalysis()
    {
        IsRunning = true;
        Logs.Clear();
        Results     = null;
        FilterText  = string.Empty;
        LogsExpanded = false;

        await AddLog("🔍 Starting analysis…");
        StateHasChanged();

        var svc = new DefinitionFinderService(msg => InvokeAsync(() => AddLog(msg)));
        try
        {
             //Results = await svc.FindAllDefinitionsAsync(FilePath!, Depth);
            Results = await svc.FindMinimalDefinitionsAsync(FilePath!, Depth, explain: ExplainMode.ReasonForInclusion);
        }
        catch (Exception ex)
        {
            LogsExpanded = true;
            await AddLog("❌ " + ex.Message);
        }
        finally
        {
            IsRunning = false;
            StateHasChanged();
        }
    }

    private async Task AddLog(string log)
    {
        Logs.Add(log);
        StateHasChanged();
        try
        {
            await JS.InvokeVoidAsync("window.scrollToBottom", "logsContainer");
        }
        catch { /* ignore if prerendering or disconnected */ }
    }
}
