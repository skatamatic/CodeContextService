@page "/analyze"
@using Microsoft.AspNetCore.Authorization
@using RoslynTools.Analyzer
@using CodeContextService.Components.Views
@using CodeContextService.Components.ViewModels
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Code Analyzer</PageTitle>

<HeadContent>
    <script>
        window.scrollToBottom = id => {
            const el = document.getElementById(id);
            if (el) el.scrollTop = el.scrollHeight;
        };
        window.getCookieByName = name => {
            const m = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));
            return m ? decodeURIComponent(m[2]) : null;
        };
        window.setCookie = (name, value) =>
            document.cookie = `${name}=${encodeURIComponent(value)}; path=/; max-age=${60 * 60 * 24 * 365}`;
    </script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-csharp.min.js"></script>
</HeadContent>

<div class="container py-4">
    <h3>Code Analysis</h3>

    <!-- File path -->
    <div class="mb-3">
        <input value="@FilePath"
               @oninput="@(e => OnFieldChanged("FilePath", e.Value?.ToString()))"
               class="form-control"
               placeholder="Full path to a .cs file"
               disabled="@IsRunning" />
    </div>

    <!-- Depth + Mode in one row -->
    <div class="row mb-3">
        <div class="col-2">
            <input type="number"
                   @bind="Depth"
                   class="form-control"
                   min="0"
                   disabled="@IsRunning"
                   title="Depth" />
        </div>
        <div class="col-2">
            <select class="form-select"
                    @bind="SelectedMode"
                    disabled="@IsRunning"
                    title="Mode">
                <option value="Normal">Full</option>
                <option value="Minified">Minified</option>
                <option value="MinifiedExplain">Min+Explain</option>
            </select>
        </div>
        <div class="col align-self-center">
            <!-- spacer -->
        </div>
    </div>

    <!-- Actions -->
    <button class="btn btn-primary me-2"
            @onclick="RunAnalysis"
            disabled="@IsRunning">
        Analyze
    </button>
    <button class="btn btn-secondary"
            @onclick="ToggleLogs">
        @(LogsExpanded ? "Hide Logs ▲" : "Show Logs ▼")
    </button>

    <!-- Logs -->
    <div class="mt-4">
        @if (LogsExpanded)
        {
            <h5>Logs</h5>
        }
        <div id="logsContainer"
             class="border rounded p-2"
             style="max-height:@(LogsExpanded ? "300px" : "auto");overflow-y:@(LogsExpanded ? "auto" : "visible");transition:max-height 0.3s;">
            @if (!Logs.Any())
            {
                <em>No logs yet.</em>
            }
            else if (!LogsExpanded)
            {
                <div style="white-space:pre-wrap;">@Logs.Last()</div>
            }
            else
            {
                <ul class="mb-0">
                    @foreach (var line in Logs)
                    {
                        <li>@line</li>
                    }
                </ul>
            }
        </div>
    </div>

    <!-- Definitions -->
    <div class="mt-5">
        <div class="d-flex justify-content-between align-items-baseline">
            <h5>Definitions</h5>
            <span class="text-muted">
                Total: @DisplayDefs.Count() definitions —
                @TotalLoC() lines
            </span>
        </div>

        @if (IsRunning)
        {
            <div class="d-flex justify-content-center align-items-center" style="height:150px;">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Analyzing…</span>
                </div>
                <span class="ms-3 text-muted">Analyzing definitions…</span>
            </div>
        }
        else if (Results == null)
        {
            <p class="text-muted">No analysis run yet.</p>
        }
        else
        {
            <div class="mb-3">
                <input value="@FilterText"
                       @oninput="@(e => OnFieldChanged("FilterText", e.Value?.ToString()))"
                       class="form-control"
                       placeholder="Filter definitions…"
                       disabled="@IsRunning" />
            </div>

            @if (!DisplayDefs.Any())
            {
                <p class="text-danger">No definitions match "@FilterText".</p>
            }
            else
            {
                <DefinitionList @key="FilterText" Definitions="DisplayDefs" />
            }
        }
    </div>
</div>

@code {
    private string? FilePath { get; set; }
    private int Depth { get; set; } = 1;
    private AnalysisMode SelectedMode { get; set; } = AnalysisMode.Minified;
    private string FilterText { get; set; } = string.Empty;

    private bool IsRunning { get; set; }
    private List<string> Logs { get; } = new();
    private bool LogsExpanded { get; set; }
    private IEnumerable<DefinitionResult>? Results;

    private enum AnalysisMode { Normal, Minified, MinifiedExplain }

    private IEnumerable<DefinitionDisplayModel> DisplayDefs =>
        Results?
            .SelectMany(r => r.Definitions.Values, (r, d) => new { r.File, Definition = d })
            .Select(x => new DefinitionDisplayModel
                {
                    Symbol = x.Definition.Symbol,
                    Namespace = x.Definition.Namespace,
                    FullName = x.Definition.FullName,
                    Code = x.Definition.Code,
                    SourceFile = x.File
                })
            .Where(d => string.IsNullOrWhiteSpace(FilterText) ||
                        d.FullName.Contains(FilterText, StringComparison.OrdinalIgnoreCase))
        ?? Enumerable.Empty<DefinitionDisplayModel>();

    private int TotalLoC()
        => DisplayDefs.Sum(d => string.IsNullOrEmpty(d.Code)
             ? 0
             : d.Code.Count(c => c == '\n') + 1);

    private bool _cookiesLoaded;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender || _cookiesLoaded) return;

        FilePath = await JS.InvokeAsync<string>("getCookieByName", "FilePath") ?? FilePath;
        var dc = await JS.InvokeAsync<string>("getCookieByName", "Depth");
        if (int.TryParse(dc, out var dd)) Depth = dd;

        var mc = await JS.InvokeAsync<string>("getCookieByName", "Mode");
        if (Enum.TryParse(mc, true, out AnalysisMode mm)) SelectedMode = mm;

        FilterText = await JS.InvokeAsync<string>("getCookieByName", "FilterText") ?? FilterText;
        _cookiesLoaded = true;
        StateHasChanged();
    }

    private async Task OnFieldChanged(string field, string? val)
    {
        switch (field)
        {
            case "FilePath": FilePath = val; break;
            case "FilterText": FilterText = val ?? string.Empty; break;
        }
        await JS.InvokeVoidAsync("setCookie", field, val ?? string.Empty);
    }

    private async Task OnDepthChanged(ChangeEventArgs e)
    {
        var txt = e.Value?.ToString();
        Depth = int.TryParse(txt, out var v) ? v : 0;
        await JS.InvokeVoidAsync("setCookie", "Depth", Depth.ToString());
    }

    void ToggleLogs() => LogsExpanded = !LogsExpanded;

    async Task RunAnalysis()
    {
        if (string.IsNullOrWhiteSpace(FilePath)) return;

        IsRunning = true;
        Results = null;
        Logs.Clear();
        LogsExpanded = false;
        StateHasChanged();

        var svc = new DefinitionFinderServiceV2(msg =>
        {
            InvokeAsync(() =>
            {
                Logs.Add(msg);
                StateHasChanged();
            });
        });

        try
        {
            Results = SelectedMode switch
            {
                AnalysisMode.Normal => await svc.FindAllDefinitionsAsync(FilePath!, Depth),
                AnalysisMode.Minified => await svc.FindMinimalDefinitionsAsync(FilePath!, Depth),
                AnalysisMode.MinifiedExplain => await svc.FindMinimalDefinitionsAsync(FilePath!, Depth, ExplainMode.ReasonForInclusion),
                _ => throw new NotSupportedException(),
            };
        }
        catch (Exception ex)
        {
            LogsExpanded = true;
            Logs.Add("❌ " + ex.Message);
        }
        finally
        {
            IsRunning = false;
            await JS.InvokeVoidAsync("setCookie", "Mode", SelectedMode.ToString());
            StateHasChanged();
        }
    }
}
