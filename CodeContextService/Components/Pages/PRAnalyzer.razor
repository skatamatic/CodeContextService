@page "/"
@page "/pr-analyze"
@using Microsoft.AspNetCore.Authorization
@using CodeContextService.Model
@using CodeContextService.Services
@using RoslynTools.Analyzer
@using CodeContextService.Components.ViewModels
@inject IJSRuntime JS
@inject PRAnalyzerService Analyzer
@inject GitHubIntegrationService GitHub
@rendermode InteractiveServer

<HeadContent>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-diff.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-csharp.min.js"></script>
    <script>
        window.highlight = () => Prism.highlightAll();
        window.scrollToBottom = id => {
            const el = document.getElementById(id);
            if (el) el.scrollTop = el.scrollHeight;
        };
        window.getCookieByName = name => {
            const match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));
            return match ? decodeURIComponent(match[2]) : null;
        };
        window.setCookie = (name, value) => {
            document.cookie = `${name}=${encodeURIComponent(value)}; path=/; max-age=${60 * 60 * 24 * 365}`;
        };
    </script>

    <script>
        window.updateStickyOffset = () => {
            // 1) measure search-bar
            const searchEl = document.querySelector('.filter-container');
            const searchH = searchEl
                ? searchEl.getBoundingClientRect().height
                : 0;
            document.documentElement
                .style
                .setProperty('--search-bar-height', `${searchH}px`);

            // 2) measure file-header
            const fileHdr = document.querySelector('.card.expanded > .card-header');
            if (fileHdr) {
                const fileH = fileHdr.getBoundingClientRect().height;
                document.documentElement
                    .style
                    .setProperty('--file-header-height', `${fileH}px`);
            }
        };

        window.addEventListener('load', updateStickyOffset);
        window.addEventListener('resize', updateStickyOffset);
    </script>

    <script>
        window.scrollIfStuck = (id, wasExpandedBefore) => {
            const el = document.getElementById(id);
            if (!el || !wasExpandedBefore) return;

            // measure how tall your sticky bars are
            const rootStyles = getComputedStyle(document.documentElement);
            const searchH = parseFloat(rootStyles.getPropertyValue('--search-bar-height')) || 0;
            const fileH = parseFloat(rootStyles.getPropertyValue('--file-header-height')) || 0;
            const totalOffset = searchH + fileH;

            // where is the header now relative to the viewport?
            const rect = el.getBoundingClientRect();

            // if it's flush or above the top of the viewport, scroll it down
            if (rect.top <= totalOffset + 1) {
                // compute the absolute scroll position we want
                const targetY = window.pageYOffset + rect.top - totalOffset - 1;
                window.scrollTo({ top: targetY, left: 0, behavior: 'auto' });
            }
        };
    </script>
</HeadContent>

<PageTitle>PR Code Analyzer</PageTitle>

<div class="container py-4">
    <h3>Analyze GitHub PR</h3>

    <!-- Inputs -->
    <div class="row g-3 mb-3">
        <div class="col-md-3">
            <input class="form-control" placeholder="Owner"
                   value="@Owner"
                   @oninput="@(e => OnFieldChanged("Owner", e.Value?.ToString()))"
                   disabled="@IsBusy" />
        </div>
        <div class="col-md-3">
            <input class="form-control" placeholder="Repository"
                   value="@Repo"
                   @oninput="@(e => OnFieldChanged("Repo", e.Value?.ToString()))"
                   disabled="@IsBusy" />
        </div>
        <div class="col-md-2">
            <input type="number" class="form-control" placeholder="PR #"
                   value="@PrNumber"
                   @oninput="OnPrNumberChanged"
                   min="1" disabled="@IsBusy" />
        </div>
        <div class="col-md-4">
            <input type="password" class="form-control" placeholder="PAT Token"
                   value="@Token"
                   @oninput="@(e => OnFieldChanged("Token", e.Value?.ToString()))"
                   disabled="@IsBusy" />
        </div>
    </div>

    <button class="btn btn-outline-info me-2" @onclick="TestToken" disabled="@IsBusy">Test Token</button>
    <button class="btn btn-primary me-2" @onclick="RunAnalysis" disabled="@DisableActions">Analyze PR</button>
    <button class="btn btn-secondary" @onclick="ToggleLogs">@(LogsExpanded ? "Hide Logs ▲" : "Show Logs ▼")</button>

    <div class="mt-3">
        <div class="alert alert-success" role="alert" hidden="@(!TokenOk)">✅ Token valid</div>
        <div class="alert alert-danger" role="alert" hidden="@(!TokenFail)">❌ Token invalid</div>
    </div>

    <!-- Logs -->
    <div class="mt-4">
        @if (LogsExpanded)
        {
            <h5>Logs</h5>
            <div id="logsContainer"
                 class="border rounded p-2"
                 style="max-height:@(LogsExpanded ? "300px" : "auto");overflow-y:@(LogsExpanded ? "auto" : "visible");transition:max-height 0.3s;">

                <ul class="mb-0">
                    @foreach (var line in Log)
                    {
                        <li>@line</li>
                    }
                </ul>
            </div>
        }
    </div>

    <br />

    <!-- busy‐spinner -->
    @if (IsBusy)
    {
        <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
            <div class="text-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Analyzing…</span>
                </div>
                <div class="mt-2">
                    @* Optional: show your last log entry here *@
                    <em>@(Log.Any() ? Log.Last() : "Starting analysis…")</em>
                </div>
            </div>
        </div>
    }
    <!-- end busy‐spinner -->
    @if (!IsBusy && FileDiffs != null && FileDiffs.Count > 0)
    {
        <h4>Analysis Results</h4>
        <div class="mb-4 filter-container">
            <input class="form-control"
                   placeholder="Filter definitions"
                   @bind="DefFilter"
                   @bind:event="oninput"
                   disabled="@IsBusy" />
        </div>

        @foreach (var file in FileDiffs.Where(f => f.FileName.EndsWith(".cs", StringComparison.OrdinalIgnoreCase))
                                       .Where(f => string.IsNullOrWhiteSpace(DefFilter) || (AnalysisResults.ContainsKey(f.FileName) && AnalysisResults[f.FileName]
                                       .Any(d => d.FullName
                                       .Contains(DefFilter, StringComparison.OrdinalIgnoreCase)))))
        {
            var fileKey = file.FileName;
            var isFileExpanded = ExpandedFiles.Contains(fileKey);
            <div class="card mb-3 shadow-sm @(isFileExpanded ? "expanded" : "")">
            <div id="fileHeader-@fileKey"
                  class="card-header d-flex justify-content-between"
                     style="cursor: pointer;"
                     @onclick="async () => { await ToggleFile(fileKey); }">
                    <strong>@file.FileName</strong>
                    <span>
                        <span class="badge bg-success me-1">+@file.Added</span>
                        <span class="badge bg-danger me-1">-@file.Removed</span>
                        <span class="ms-2">@(isFileExpanded ? "▲" : "▼")</span>
                    </span>
                </div>
                @if (isFileExpanded)
                {
                    <div class="card-body">
                        @{
                            var diffKey = "diff";
                            var isDiffExpanded = ExpandedDefs.Contains(diffKey);
                            <div class="card mb-2 @(isDiffExpanded ? "expanded" : "")">
                                <div class="card-header"
                                     style="cursor: pointer;"
                                     @onclick="async () => { await ToggleDef(diffKey);}">
                                    <b>Diff</b>
                                    <span class="ms-2 text-muted">@(isDiffExpanded ? "▲" : "▼")</span>
                                </div>
                                @if (isDiffExpanded)
                                {
                                    <div class="card-body p-2">
                                        <pre><code class="language-diff">@string.Join("\n", file.DiffLines)</code></pre>
                                    </div>
                                }
                            </div>
                        }
                        @foreach (var def in AnalysisResults!.GetValueOrDefault(file.FileName, Array.Empty<DefinitionDisplayModel>())
                            .Where(d => string.IsNullOrWhiteSpace(DefFilter) || d.FullName!.Contains(DefFilter, StringComparison.OrdinalIgnoreCase)))
                        {
                            var defKey = file.FileName + "|" + def.FullName;
                            var isDefExpanded = ExpandedDefs.Contains(defKey);
                            <div class="card mb-2 @(isDefExpanded ? "expanded" : "")">
                                <div class="card-header" id="defHeader-@Uri.EscapeDataString(defKey)"
                                     style="cursor: pointer;"
                                     @onclick="async () => { await ToggleDef(defKey);}">
                                    <b>Definition:</b> @def.FullName
                                    <span class="ms-2 text-muted">@(isDefExpanded ? "▲" : "▼")</span>
                                </div>
                                @if (isDefExpanded)
                                {
                                    <div class="card-body p-2">
                                        <pre><code class="language-csharp">@def.Code</code></pre>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                }
            </div>
        }
    }
</div>

@code {
    string? Token;
    string? Owner;
    string? Repo;
    int PrNumber;

    bool IsBusy;
    bool TokenOk;
    bool TokenFail;
    List<string> Log { get; } = new();
    bool LogsExpanded;
    bool CookiesLoaded;
    HashSet<string> ExpandedFiles { get; } = new();
    HashSet<string> ExpandedDefs { get; } = new();

    List<FileDiff> FileDiffs { get; } = new();
    Dictionary<string, ViewModels.DefinitionDisplayModel[]> AnalysisResults { get; } = new();

    bool DisableActions => IsBusy || !TokenOk
                                   || string.IsNullOrWhiteSpace(Owner)
                                   || string.IsNullOrWhiteSpace(Repo)
                                   || PrNumber <= 0;

    string _defFilter = string.Empty;
    string DefFilter
    {
        get => _defFilter;
        set
        {
            if (_defFilter == value) return;
            _defFilter = value;
            UpdateFilterExpansion();
        }
    }

    private void UpdateFilterExpansion()
    {

        // if there’s a filter, expand any file that has at least one matching definition
        if (!string.IsNullOrWhiteSpace(_defFilter))
        {
            // reset everything
            ExpandedFiles.Clear();

            foreach (var file in FileDiffs)
            {
                if (AnalysisResults.TryGetValue(file.FileName!, out var defs) &&
                    defs.Any(d => d.FullName!.Contains(_defFilter, StringComparison.OrdinalIgnoreCase)))
                {
                    ExpandedFiles.Add(file.FileName!);
                }
            }
        }

        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !CookiesLoaded)
        {
            Owner = await JS.InvokeAsync<string>("getCookieByName", "Owner") ?? Owner;
            Repo = await JS.InvokeAsync<string>("getCookieByName", "Repo") ?? Repo;
            Token = await JS.InvokeAsync<string>("getCookieByName", "Token") ?? Token;
            var pr = await JS.InvokeAsync<string>("getCookieByName", "PrNumber");
            if (int.TryParse(pr, out var prVal)) PrNumber = prVal;
            CookiesLoaded = true;
            StateHasChanged();
        }
        await JS.InvokeVoidAsync("highlight");
    }

    private async Task OnFieldChanged(string field, string? value)
    {
        value ??= string.Empty;
        switch (field)
        {
            case "Owner": Owner = value; break;
            case "Repo": Repo = value; break;
            case "Token": Token = value; break;
        }
        await JS.InvokeVoidAsync("setCookie", field, value);
    }

    private async Task OnPrNumberChanged(ChangeEventArgs e)
    {
        var text = e.Value?.ToString();
        PrNumber = int.TryParse(text, out var num) ? num : 0;
        await JS.InvokeVoidAsync("setCookie", "PrNumber", PrNumber.ToString());
    }

    private async Task TestToken()
    {
        IsBusy = true;
        TokenOk = await GitHub.ValidateTokenAsync(Token);
        TokenFail = !TokenOk;
        await JS.InvokeVoidAsync("setCookie", "Token", Token);
        IsBusy = false;
        StateHasChanged();
    }

    private async Task RunAnalysis()
    {
        IsBusy = true;
        Log.Clear(); 
        AnalysisResults.Clear();
        FileDiffs.Clear();
        try
        {
            var result = await Analyzer.RunAnalysis(Token, Owner, Repo, PrNumber, async msg => await InvokeAsync(() => AddLog(msg)));

            FileDiffs.AddRange(result.FileDiffs!);
            foreach (var item in result.DefinitionMap!)
            {
                AnalysisResults[item.Key] = item.Value.Select(x => new DefinitionDisplayModel { FullName = x.FullName, Code = x.Code }).ToArray();
            }
        }
        catch (Exception ex)
        {
            await AddLog($"❌ {ex.Message}");
        }
        finally 
        { 
            IsBusy = false; 
            StateHasChanged(); 
        }
    }

    private void ToggleLogs() => LogsExpanded = !LogsExpanded;

    private async Task ToggleFile(string key)
    {
        // remember whether we're collapsing
        var wasExpanded = ExpandedFiles.Contains(key);
        if (wasExpanded)
            ExpandedFiles.Remove(key);
        else
            ExpandedFiles.Add(key);

        // recalc the CSS offsets for sticky
        await JS.InvokeVoidAsync("updateStickyOffset");
        // then, if we just collapsed, scroll back up if it was stuck
        await JS.InvokeVoidAsync("scrollIfStuck", $"fileHeader-{key}", wasExpanded);
    }

    private async Task ToggleDef(string key)
    {
        var wasExpanded = ExpandedDefs.Contains(key);
        if (wasExpanded)
            ExpandedDefs.Remove(key);
        else
            ExpandedDefs.Add(key);

        await JS.InvokeVoidAsync("updateStickyOffset");
        await JS.InvokeVoidAsync("scrollIfStuck", $"defHeader-{Uri.EscapeDataString(key)}", wasExpanded);
    }

    private async Task AddLog(string msg)
    {
        Log.Add(msg);
        StateHasChanged();
        try 
        { 
            await JS.InvokeVoidAsync("scrollToBottom", "logsContainer"); 
        }
        catch
        {
            // Can't log a log exception
        }
    }
}
